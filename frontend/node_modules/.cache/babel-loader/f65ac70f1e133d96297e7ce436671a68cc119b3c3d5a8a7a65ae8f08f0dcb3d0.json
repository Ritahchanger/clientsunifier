{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Async thunk action creator for fetching all blogs with pagination\nexport const fetchBlogs = createAsyncThunk('blogs/fetchBlogs', async ({\n  page = 1,\n  limit = 10\n}) => {\n  // Default page and limit values\n  const response = await axios.get(`${Config.apiUrl}/api/blog/get?page=${page}&limit=${limit}`);\n  const data = response.data;\n  return data;\n});\n\n// Async thunk action creator for fetching a single blog post by its ID\nexport const fetchBlogById = createAsyncThunk('blogs/fetchBlogById', async blogId => {\n  const response = await axios.get(`${Config.apiUrl}/api/blog/get/${blogId}`);\n  const data = response.data.data;\n  return data;\n});\n\n// Initial state\nconst initialState = {\n  blogs: [],\n  singleBlog: null,\n  status: 'idle',\n  error: null,\n  pagination: {\n    page: 1,\n    limit: 10,\n    total: 0,\n    totalPages: 0\n  }\n};\n\n// Create slice\nconst BlogSlice = createSlice({\n  name: 'blogs',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // Fetch Blogs reducers\n    .addCase(fetchBlogs.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchBlogs.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.blogs = action.payload.data; // Assuming data field contains array of blogs\n      state.pagination.page = action.payload.page;\n      state.pagination.limit = action.payload.limit;\n      state.pagination.total = action.payload.total;\n      state.pagination.totalPages = Math.ceil(action.payload.total / action.payload.limit);\n    }).addCase(fetchBlogs.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    })\n    // Fetch Single Blog reducers\n    .addCase(fetchBlogById.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchBlogById.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.singleBlog = action.payload;\n    }).addCase(fetchBlogById.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const blogsActions = {\n  ...BlogSlice.actions,\n  fetchBlogs,\n  fetchBlogById\n};\nexport default BlogSlice;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchBlogs","page","limit","response","get","Config","apiUrl","data","fetchBlogById","blogId","initialState","blogs","singleBlog","status","error","pagination","total","totalPages","BlogSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","Math","ceil","rejected","message","blogsActions","actions"],"sources":["/home/ritahchanger/Desktop/ATTATCHEMEN/writersunifier/frontend/src/Redux/features/BlogSlice.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n\n// Async thunk action creator for fetching all blogs with pagination\nexport const fetchBlogs = createAsyncThunk(\n  'blogs/fetchBlogs',\n  async ({ page = 1, limit = 10 }) => { // Default page and limit values\n    const response = await axios.get(`${Config.apiUrl}/api/blog/get?page=${page}&limit=${limit}`);\n    const data = response.data;\n    return data;\n  }\n);\n\n// Async thunk action creator for fetching a single blog post by its ID\nexport const fetchBlogById = createAsyncThunk(\n  'blogs/fetchBlogById',\n  async (blogId) => {\n    const response = await axios.get(`${Config.apiUrl}/api/blog/get/${blogId}`);\n    const data = response.data.data;\n    return data;\n  }\n);\n\n// Initial state\nconst initialState = {\n  blogs: [],\n  singleBlog: null,\n  status: 'idle',\n  error: null,\n  pagination: {\n    page: 1,\n    limit: 10,\n    total: 0,\n    totalPages: 0\n  }\n};\n\n// Create slice\nconst BlogSlice = createSlice({\n  name: 'blogs',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // Fetch Blogs reducers\n      .addCase(fetchBlogs.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchBlogs.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.blogs = action.payload.data; // Assuming data field contains array of blogs\n        state.pagination.page = action.payload.page;\n        state.pagination.limit = action.payload.limit;\n        state.pagination.total = action.payload.total;\n        state.pagination.totalPages = Math.ceil(action.payload.total / action.payload.limit);\n      })\n      .addCase(fetchBlogs.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      // Fetch Single Blog reducers\n      .addCase(fetchBlogById.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchBlogById.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.singleBlog = action.payload;\n      })\n      .addCase(fetchBlogById.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  }\n});\n\nexport const blogsActions = { ...BlogSlice.actions, fetchBlogs, fetchBlogById };\n\nexport default BlogSlice;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}