{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport Config from \"../../../Config\";\n\n// Async thunk action creator for fetching all blogs\nexport const fetchBlogs = createAsyncThunk('blogs/fetchBlogs', async () => {\n  const response = await axios.get(`${Config.apiUrl}/api/blog/get`);\n  const data = response.data.data;\n  return data;\n});\n\n// Async thunk action creator for fetching a single blog post by its ID\nexport const fetchBlogById = createAsyncThunk('blogs/fetchBlogById', async blogId => {\n  const response = await axios.get(`${Config.apiUrl}/api/blog/get/${blogId}`);\n  const data = response.data.data;\n  return data;\n});\n\n// Initial state\nconst initialState = {\n  blogs: [],\n  singleBlog: null,\n  // Add field to store single blog post\n  status: 'idle',\n  error: null\n};\n\n// Create slice\nconst BlogSlice = createSlice({\n  name: 'blogs',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchBlogs.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchBlogs.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.blogs = action.payload;\n    }).addCase(fetchBlogs.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchBlogById.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchBlogById.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.singleBlog = action.payload;\n    }).addCase(fetchBlogById.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const blogsActions = {\n  ...BlogSlice.actions,\n  fetchBlogs,\n  fetchBlogById\n};\nexport default BlogSlice;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","Config","fetchBlogs","response","get","apiUrl","data","fetchBlogById","blogId","initialState","blogs","singleBlog","status","error","BlogSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","blogsActions","actions"],"sources":["/home/ritahchanger/Desktop/ATTATCHEMEN/writersunifier/frontend/src/Redux/features/BlogSlice.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nimport Config from  \"../../../Config\"\n \n\n// Async thunk action creator for fetching all blogs\nexport const fetchBlogs = createAsyncThunk(\n  'blogs/fetchBlogs',\n  async () => {\n    const response = await axios.get(`${Config.apiUrl}/api/blog/get`);\n    const data = response.data.data;\n    return data;\n  }\n);\n\n// Async thunk action creator for fetching a single blog post by its ID\nexport const fetchBlogById = createAsyncThunk(\n  'blogs/fetchBlogById',\n  async (blogId) => {\n    const response = await axios.get(`${Config.apiUrl}/api/blog/get/${blogId}`);\n    const data = response.data.data;\n    return data;\n  }\n);\n\n// Initial state\nconst initialState = {\n  blogs: [],\n  singleBlog: null, // Add field to store single blog post\n  status: 'idle',\n  error: null\n};\n\n// Create slice\nconst BlogSlice = createSlice({\n  name: 'blogs',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      \n      .addCase(fetchBlogs.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchBlogs.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.blogs = action.payload;\n      })\n      .addCase(fetchBlogs.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n     \n      .addCase(fetchBlogById.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchBlogById.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.singleBlog = action.payload;\n      })\n      .addCase(fetchBlogById.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  }\n});\n\nexport const blogsActions = { ...BlogSlice.actions, fetchBlogs, fetchBlogById };\n\nexport default BlogSlice;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,MAAM,MAAO,iBAAiB;;AAGrC;AACA,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CACxC,kBAAkB,EAClB,YAAY;EACV,MAAMI,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,MAAM,CAACI,MAAM,eAAe,CAAC;EACjE,MAAMC,IAAI,GAAGH,QAAQ,CAACG,IAAI,CAACA,IAAI;EAC/B,OAAOA,IAAI;AACb,CACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGR,gBAAgB,CAC3C,qBAAqB,EACrB,MAAOS,MAAM,IAAK;EAChB,MAAML,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,MAAM,CAACI,MAAM,iBAAiBG,MAAM,EAAE,CAAC;EAC3E,MAAMF,IAAI,GAAGH,QAAQ,CAACG,IAAI,CAACA,IAAI;EAC/B,OAAOA,IAAI;AACb,CACF,CAAC;;AAED;AACA,MAAMG,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,UAAU,EAAE,IAAI;EAAE;EAClBC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGhB,WAAW,CAAC;EAC5BiB,IAAI,EAAE,OAAO;EACbN,YAAY;EACZO,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAEJC,OAAO,CAACjB,UAAU,CAACkB,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDO,OAAO,CAACjB,UAAU,CAACoB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACT,MAAM,GAAG,WAAW;MAC1BS,KAAK,CAACX,KAAK,GAAGa,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACjB,UAAU,CAACuB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACT,MAAM,GAAG,QAAQ;MACvBS,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACV,KAAK,CAACa,OAAO;IACpC,CAAC,CAAC,CAEDP,OAAO,CAACZ,aAAa,CAACa,OAAO,EAAGC,KAAK,IAAK;MACzCA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDO,OAAO,CAACZ,aAAa,CAACe,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACT,MAAM,GAAG,WAAW;MAC1BS,KAAK,CAACV,UAAU,GAAGY,MAAM,CAACC,OAAO;IACnC,CAAC,CAAC,CACDL,OAAO,CAACZ,aAAa,CAACkB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAACT,MAAM,GAAG,QAAQ;MACvBS,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACV,KAAK,CAACa,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG;EAAE,GAAGb,SAAS,CAACc,OAAO;EAAE1B,UAAU;EAAEK;AAAc,CAAC;AAE/E,eAAeO,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}